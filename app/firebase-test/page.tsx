"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { collection, addDoc, getDocs, deleteDoc, doc } from "firebase/firestore"
import { db } from "@/lib/firebase"
import Link from "next/link"

export default function FirebaseTest() {
  const [status, setStatus] = useState<string>("–ù–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
  const [logs, setLogs] = useState<string[]>([])
  const [testData, setTestData] = useState<any[]>([])

  const addLog = (message: string) => {
    const timestamp = new Date().toLocaleTimeString()
    setLogs((prev) => [...prev, `[${timestamp}] ${message}`])
    console.log(message)
  }

  const testFirebaseConnection = async () => {
    setLogs([])
    addLog("üî• –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç Firebase...")

    try {
      // –¢–µ—Å—Ç 1: –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
      addLog("üìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
      const testDoc = {
        message: "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        timestamp: new Date().toISOString(),
        testId: Math.random().toString(36).substr(2, 9),
      }

      const docRef = await addDoc(collection(db, "test"), testDoc)
      addLog(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: ${docRef.id}`)

      // –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      addLog("üìñ –¢–µ—Å—Ç 2: –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
      const querySnapshot = await getDocs(collection(db, "test"))
      const docs: any[] = []
      querySnapshot.forEach((doc) => {
        docs.push({ id: doc.id, ...doc.data() })
      })

      addLog(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${docs.length}`)
      setTestData(docs)

      // –¢–µ—Å—Ç 3: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
      addLog("üóëÔ∏è –¢–µ—Å—Ç 3: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
      await deleteDoc(doc(db, "test", docRef.id))
      addLog("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω")

      setStatus("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
      addLog("üéâ Firebase —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞: ${error}`)
      setStatus(`‚ùå –û—à–∏–±–∫–∞: ${error}`)
    }
  }

  const testOrders = async () => {
    addLog("üì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")

    try {
      const testOrder = {
        orderNumber: Math.floor(Math.random() * 1000),
        items: [{ id: 1, name: "–¢–µ—Å—Ç–æ–≤—ã–π –±—É—Ä–≥–µ—Ä", quantity: 1, price: 350 }],
        totalPrice: 350,
        status: "preparing",
        paymentMethod: "card",
        kioskId: "kiosk-001",
        timestamp: new Date().toISOString(),
        createdAt: new Date(),
      }

      const docRef = await addDoc(collection(db, "orders"), testOrder)
      addLog(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ${docRef.id}`)

      // –ß–∏—Ç–∞–µ–º –∑–∞–∫–∞–∑—ã
      const ordersSnapshot = await getDocs(collection(db, "orders"))
      addLog(`üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ: ${ordersSnapshot.size}`)
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${error}`)
    }
  }

  const clearTestData = async () => {
    try {
      addLog("üßπ –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
      const querySnapshot = await getDocs(collection(db, "test"))

      for (const document of querySnapshot.docs) {
        await deleteDoc(doc(db, "test", document.id))
      }

      addLog(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${querySnapshot.size} —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`)
      setTestData([])
    } catch (error) {
      addLog(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error}`)
    }
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-4xl mx-auto">
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              üî• –¢–µ—Å—Ç Firebase –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
              <Link href="/">
                <Button variant="outline" size="sm">
                  –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é
                </Button>
              </Link>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="flex gap-4">
                <Button onClick={testFirebaseConnection}>–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</Button>
                <Button onClick={testOrders} variant="outline">
                  –¢–µ—Å—Ç –∑–∞–∫–∞–∑–æ–≤
                </Button>
                <Button onClick={clearTestData} variant="destructive">
                  –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
                </Button>
              </div>

              <div className="p-4 bg-gray-100 rounded">
                <strong>–°—Ç–∞—Ç—É—Å:</strong> {status}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* –õ–æ–≥–∏ */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>üìã –õ–æ–≥–∏</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="bg-black text-green-400 p-4 rounded font-mono text-sm max-h-96 overflow-y-auto">
              {logs.length === 0 ? (
                <div>–ù–∞–∂–º–∏—Ç–µ "–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è" –¥–ª—è –Ω–∞—á–∞–ª–∞...</div>
              ) : (
                logs.map((log, index) => <div key={index}>{log}</div>)
              )}
            </div>
          </CardContent>
        </Card>

        {/* –î–∞–Ω–Ω—ã–µ */}
        {testData.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle>üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ</CardTitle>
            </CardHeader>
            <CardContent>
              <pre className="bg-gray-100 p-4 rounded text-sm overflow-auto">{JSON.stringify(testData, null, 2)}</pre>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}
